// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.17;
contract CallOption{
enum Status{
Selling,
Occupied,
Sold
}
struct Share{
uint256 premium_price;
uint256 share_price;
Status share_status;
}
address public buyer;
address public seller;
address public owner;
Share public one;
constructor(){
owner=msg.sender;
seller=owner;
}
modifier onlyOwner(){
owner==msg.sender;
_;
}
function createShare(uint256 price) external onlyOwner{
one = Share(10,price,Status(0));
}
function hold_share_buyer(address payable buyer) external onlyOwner{
uint256 buy = buyer.balance;
Share memory temp = one;
require(buy>=temp.premium_price);
buyer.transfer(buy);
Status chk = Status(1);
temp.share_status=chk;
}
function after_duration(address payable buyer, bool check) external payable{
Share memory temp = one;
if(check){
uint256 bal = buyer.balance;
require(bal>=temp.share_price);
buyer.transfer(temp.share_price);
Status sts = Status(2);
one.share_status=sts;
change(buyer);
}else{
Status sts = Status(0);
one.share_status=sts;
}
}
function change(address _x) public onlyOwner{
owner=_x;
}
}
